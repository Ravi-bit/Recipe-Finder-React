{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","searchHandler","e","setState","search","target","value","inputHandler","times","defaultValue","ingredientHandler","state","xhr","XMLHttpRequest","that","url","open","send","onreadystatechange","this","readyState","status","JSON","parse","responseText","meals","ingredient","Ing","i","j","duplicateMeals","a","b","hasOwnProperty","push","IconColor","RedLoveIcon","BlackLoveIcon","showReceived","showNotReceived","ingredients","showPara","Dish","strMeal","category","strCategory","area","strArea","image","strMealThumb","instructions","strInstructions","iconcolorHandler","className","onClick","onChange","type","placeholder","variant","src","alt","map","x","key","style","margin","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mNAsKeA,G,wDAjKb,aAAc,IAAD,8BACX,gBAoBJC,cAAe,SAAAC,GACT,EAAKC,SAAS,CAACC,OAASF,EAAEG,OAAOC,SAtBxB,EA0BfC,aAAe,SAAAL,GACX,EAAKC,SAAS,CAACK,MAAM,IACrBN,EAAEG,OAAOC,MAAQJ,EAAEG,OAAOI,aAC1B,EAAKN,SAAS,CAACC,OAAO,MA7BX,EAkCfM,kBAAoB,WAEhB,GAAG,EAAKC,MAAMP,QAAU,EAAKO,MAAMH,OAAO,EAAE,CAC1C,IAAII,EAAI,IAAIC,eAERC,EAAK,eACLC,EAAK,wDAAwD,EAAKJ,MAAMP,OAC5EQ,EAAII,KAAK,MAAMD,GAAI,GACnBH,EAAIK,OACJL,EAAIM,mBAAmB,WACrB,GAAqB,IAAlBC,KAAKC,YAAgC,MAAdD,KAAKE,OAGzB,GAAyC,OAAtCC,KAAKC,MAAMJ,KAAKK,cAAcC,MAAa,CAM5C,IALA,IAAIC,EAAWJ,KAAKC,MAAMJ,KAAKK,cAAcC,MAAM,GAC/CE,GAAI,EACJC,EAAE,EACFC,EAAE,EACFC,EAAe,GACbH,GAAI,CACN,IAAII,EAAI,gBAAgBH,EACpBI,EAAG,aAAaH,EAChBH,EAAWO,eAAeF,IAAwB,OAAlBL,EAAWK,IAAiC,KAAlBL,EAAWK,IAAaL,EAAWO,eAAeD,IAAwB,OAAlBN,EAAWM,IAAiC,KAAlBN,EAAWM,IAG1JF,EAAeI,KAAKR,EAAWK,GAAG,SAASL,EAAWM,IACtDJ,IACAC,KAGDF,GAAI,EAGRb,EAAKX,SAAS,CAACgC,UAAU,eACzBrB,EAAKX,SAAS,CAACK,MAAM,IACrBM,EAAKX,SAAS,CAACiC,aAAY,IAC3BtB,EAAKX,SAAS,CAACkC,eAAc,IAC7BvB,EAAKX,SAAS,CAACmC,cAAa,IAC5BxB,EAAKX,SAAS,CAACoC,iBAAgB,IAC/BzB,EAAKX,SAAS,CAACqC,YAAYV,IAC3BhB,EAAKX,SAAS,CAACsC,SApCf,KAqCA3B,EAAKX,SAAS,CAACuC,KAAMpB,KAAKC,MAAMJ,KAAKK,cAAcC,MAAM,GAAGkB,UAC5D7B,EAAKX,SAAS,CAACyC,SAAWtB,KAAKC,MAAMJ,KAAKK,cAAcC,MAAM,GAAGoB,cACjE/B,EAAKX,SAAS,CAAC2C,KAAOxB,KAAKC,MAAMJ,KAAKK,cAAcC,MAAM,GAAGsB,UAC7DjC,EAAKX,SAAS,CAAC6C,MAAO1B,KAAKC,MAAMJ,KAAKK,cAAcC,MAAM,GAAGwB,eAC7DnC,EAAKX,SAAS,CAAC+C,aAAc5B,KAAKC,MAAMJ,KAAKK,cAAcC,MAAM,GAAG0B,uBAGpErC,EAAKX,SAAS,CAACK,MAAM,IACrBM,EAAKX,SAAS,CAACkC,eAAc,IAC7BvB,EAAKX,SAAS,CAACiC,aAAY,IAC3BtB,EAAKX,SAAS,CAACgC,UAAU,eACzBrB,EAAKX,SAAS,CAACmC,cAAa,IAC5BxB,EAAKX,SAAS,CAACoC,iBAAgB,IAC/BzB,EAAKX,SAAS,CAACsC,SAAU,iCAxF1B,EAiGfW,iBAAmB,WAEW,eAAvB,EAAKzC,MAAMwB,WAA4B,EAAKxB,MAAMyB,aAC9C,EAAKjC,SAAS,CAACgC,UAAU,aACzB,EAAKhC,SAAS,CAACiC,aAAY,IAC3B,EAAKjC,SAAS,CAACkC,eAAe,KAGN,aAAvB,EAAK1B,MAAMwB,WAA0B,EAAKxB,MAAM0B,gBACtD,EAAKlC,SAAS,CAACgC,UAAU,eACzB,EAAKhC,SAAS,CAACiC,aAAY,IAC3B,EAAKjC,SAAS,CAACkC,eAAe,MA1GhC,EAAK1B,MAAM,CACT2B,cAAa,EACbC,iBAAgB,EAChBE,SAAS,iDACTrC,OAAO,GACPsC,KAAK,GACLE,SAAS,GACTE,KAAK,GACLN,YAAY,GACZhC,MAAM,EACNwC,MAAM,GACNE,aAAa,GACbb,eAAc,EACdD,aAAY,EACZD,UAAU,IAhBD,E,qDAiHb,OACE,yBAAKkB,UAAU,OACb,4BAAQA,UAAU,WAAlB,iBACA,2BAAOC,QAASnC,KAAKZ,aAAcgD,SAAUpC,KAAKlB,cAAgBoD,UAAU,SAASG,KAAK,OAAOC,YAAY,+BAC7G,4BAAQH,QAASnC,KAAKT,kBAAkB2C,UAAU,MAAMK,QAAQ,aAAhE,mBACCvC,KAAKR,MAAM4B,iBACZ,yBAAKc,UAAU,QACVlC,KAAKR,MAAM8B,UAGftB,KAAKR,MAAM2B,cACZ,yBAAKe,UAAU,OACT,gCACI,yBAAKA,UAAU,eACb,0BAAMA,UAAU,cAAclC,KAAKR,MAAM+B,MACzC,0BAAMY,QAASnC,KAAKiC,iBAAmBC,UAAWlC,KAAKR,MAAMwB,WAA7D,aAGR,yBAAKkB,UAAU,WACR,yBAAKA,UAAU,cACV,yBAAKA,UAAU,aAAYM,IAAKxC,KAAKR,MAAMqC,MAAOY,IAAKzC,KAAKR,MAAM+B,QAEvE,yBAAKW,UAAU,cACT,yBAAKA,UAAU,aACf,0BAAMA,UAAU,QAAhB,uBAA4ClC,KAAKR,MAAMiC,UAAgB,6BACvE,0BAAMS,UAAU,QAAhB,sBAA2ClC,KAAKR,MAAMmC,OAE5D,yBAAKO,UAAU,mBACV,0BAAMA,UAAU,QAAhB,eACA,yBAAKA,UAAU,kBACVlC,KAAKR,MAAM6B,YAAYqB,KAAK,SAAAC,GAAC,OAC5B,uBAAGT,UAAU,QAAQU,IAAKD,GAAIA,QAIzC,yBAAKT,UAAU,oBACV,0BAAMA,UAAU,aAAhB,WACA,yBAAKA,UAAU,mBACV,yBAAKW,MAAO,CAACC,OAAO,KAAM9C,KAAKR,MAAMuC,wB,GAxJ9CgB,cCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.2f45b639.chunk.js","sourcesContent":["import React,{Component} from 'react';\r\nimport './App.css';\r\nimport './index.css';\r\n\r\nclass App extends Component {\r\n  constructor(){\r\n    super();\r\n    this.state={\r\n      showReceived:false,\r\n      showNotReceived:true,\r\n      showPara:\"Type a Dish Name to search for it's ingredient\",\r\n      search:\"\",\r\n      Dish:\"\",\r\n      category:\"\",\r\n      area:\"\",\r\n      ingredients:[],\r\n      times:1,\r\n      image:\"\",\r\n      instructions:\"\",\r\n      BlackLoveIcon:true,\r\n      RedLoveIcon:false,\r\n      IconColor:\"\"\r\n    }\r\n}\r\n\r\n//Function for update the state of search\r\nsearchHandler= e =>{\r\n      this.setState({search : e.target.value});\r\n}\r\n\r\n//This function add some functionality to the input\r\ninputHandler = e =>{\r\n    this.setState({times:1});\r\n    e.target.value = e.target.defaultValue;\r\n    this.setState({search:\"\"});\r\n    //console.log(\"input \"+this.state.times);\r\n}\r\n\r\n//Function that make Http request\r\ningredientHandler = ()=>{\r\n    //console.log(\"Before if:\"+this.state.times);\r\n    if(this.state.search && this.state.times<=1){\r\n      var xhr=new XMLHttpRequest();\r\n      var text =\"\";\r\n      let that=this;\r\n      let url= \"https://www.themealdb.com/api/json/v1/1/search.php?s=\"+this.state.search; //This is the link to make API call \r\n      xhr.open(\"GET\",url,true);\r\n      xhr.send();\r\n      xhr.onreadystatechange=function(){\r\n        if(this.readyState===4 && this.status===200){\r\n              //console.log(typeof(JSON.parse(this.responseText).meals));\r\n             // console.log(JSON.parse(this.responseText));\r\n              if(JSON.parse(this.responseText).meals!==null){\r\n                var ingredient=JSON.parse(this.responseText).meals[0];\r\n                let Ing=true;\r\n                let i=1;\r\n                let j=1;\r\n                let duplicateMeals=[];\r\n                while(Ing){\r\n                    let a=  \"strIngredient\"+i;\r\n                    let b= \"strMeasure\"+j;\r\n                    if((ingredient.hasOwnProperty(a) && ingredient[a] !== null && ingredient[a] !== \"\")&&(ingredient.hasOwnProperty(b) && ingredient[b] !== null && ingredient[b] !== \"\")){\r\n                      //console.log(ingredient[a]);\r\n                     //console.log(ingredient[b]);\r\n                     duplicateMeals.push(ingredient[a]+\" ---- \"+ingredient[b]);\r\n                     i++;\r\n                     j++;\r\n                    }\r\n                    else{\r\n                    Ing=false;\r\n                    }\r\n                }\r\n                that.setState({IconColor:\"blackColor\"});\r\n                that.setState({times:2});\r\n                that.setState({RedLoveIcon:true});\r\n                that.setState({BlackLoveIcon:false});\r\n                that.setState({showReceived:true});\r\n                that.setState({showNotReceived:false});\r\n                that.setState({ingredients:duplicateMeals});\r\n                that.setState({showPara: text});\r\n                that.setState({Dish: JSON.parse(this.responseText).meals[0].strMeal});\r\n                that.setState({category : JSON.parse(this.responseText).meals[0].strCategory});\r\n                that.setState({area : JSON.parse(this.responseText).meals[0].strArea});\r\n                that.setState({image: JSON.parse(this.responseText).meals[0].strMealThumb});\r\n                that.setState({instructions: JSON.parse(this.responseText).meals[0].strInstructions});  \r\n              }\r\n              else{\r\n                that.setState({times:2});\r\n                that.setState({BlackLoveIcon:true});\r\n                that.setState({RedLoveIcon:false});\r\n                that.setState({IconColor:\"blackColor\"});\r\n                that.setState({showReceived:false});\r\n                that.setState({showNotReceived:true});\r\n                that.setState({showPara: \"No data has been received\"});\r\n             } \r\n        }\r\n      };\r\n    }\r\n}\r\n\r\n\r\n  //Function for handling the colour of a icon\r\niconcolorHandler = () =>{\r\n    //console.log(\"outside \"+this.state.IconColor)\r\n    if(this.state.IconColor===\"blackColor\" && this.state.RedLoveIcon){\r\n           this.setState({IconColor:\"redColor\"});\r\n           this.setState({RedLoveIcon:false});\r\n           this.setState({BlackLoveIcon: true});\r\n           //console.log(\"Inside1 \"+this.state.IconColor);\r\n    }\r\n    else if(this.state.IconColor===\"redColor\" && this.state.BlackLoveIcon){\r\n      this.setState({IconColor:\"blackColor\"});\r\n      this.setState({RedLoveIcon:true});\r\n      this.setState({BlackLoveIcon: false}); \r\n      //console.log(\"Inside2 \"+this.state.IconColor);\r\n    }\r\n}\r\nrender(){\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"heading\">Recipe Finder</header>\r\n      <input onClick={this.inputHandler} onChange={this.searchHandler}  className=\"search\" type=\"text\" placeholder=\"Enter the name of the Dish\"></input>\r\n      <button onClick={this.ingredientHandler}className=\"btn\" variant=\"contained\">Get Ingredients</button>\r\n      {this.state.showNotReceived && \r\n      <div className=\"para\">\r\n          {this.state.showPara}\r\n      </div>\r\n      }\r\n      {this.state.showReceived &&\r\n      <div className=\"box\">\r\n            <header>\r\n                <div className=\"box-heading\">\r\n                  <span className=\"box-header\">{this.state.Dish}</span>\r\n                  <span onClick={this.iconcolorHandler}  className={this.state.IconColor}> &#9825;</span>\r\n                </div>\r\n            </header>\r\n          <div className=\"content\">\r\n                 <div className=\"image-area\">\r\n                      <img className=\"Meal-image\"src={this.state.image} alt={this.state.Dish}></img>\r\n                 </div>\r\n                 <div className=\"RecipeList\">\r\n                       <div className=\"Meal-list\">\r\n                       <span className=\"info\"> Category of Meal - {this.state.category}</span><br />\r\n                       <span className=\"info\">Area of the Meal - {this.state.area}</span> \r\n                     </div>\r\n                 <div className=\"Ingredient-list\">\r\n                      <span className=\"info\">Ingredients</span>\r\n                      <div className=\"Ingredient-box\">\r\n                          {this.state.ingredients.map( x => (\r\n                            <p className=\"space\" key={x}>{x}</p>\r\n                          ))}\r\n                      </div>\r\n                 </div>\r\n                 <div className=\"Instruction-list\">\r\n                      <span className=\"info-last\">Recipes</span>\r\n                      <div className=\"Instruction-box\">\r\n                           <div style={{margin:13}}>{this.state.instructions}</div>\r\n                      </div>\r\n                 </div>  \r\n           </div>\r\n         </div>\r\n      </div>}\r\n    </div>\r\n   );\r\n  }\r\n}\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}